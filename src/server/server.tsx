/* Generated by restful-react */

import React from "react";
import { Get, GetProps, useGet, UseGetProps } from "restful-react";
export const SPEC_VERSION = "2.0.0"; 
export interface Critic {
  /**
   * Critic's name (e.g. A. O. Scott).
   */
  display_name?: string;
  /**
   * Field used when sorting.
   */
  sort_name?: string;
  /**
   * Status of the critic (full-time, part-time, or null).
   */
  status?: string;
  /**
   * Short bio of critic.
   */
  bio?: string;
  /**
   * Critic name for URL (spaces are replaced with hyphens and periods removed).
   */
  "seo-name"?: string;
  /**
   * Image of critic.
   */
  multimedia?: {
  resource?: {
  /**
   * Type of resource (always set to image).
   */
  type?: string;
  /**
   * URL of image.
   */
  src?: string;
  /**
   * Image height.
   */
  height?: number;
  /**
   * Image width.
   */
  width?: number;
  /**
   * Image photo credit.
   */
  credit?: string;
};
};
}

export interface Link {
  /**
   * Type of asset linked to. Always article.
   */
  type?: string;
  /**
   * Review URL.
   */
  url?: string;
  /**
   * Suggested text for link.
   */
  suggested_link_text?: string;
}

export interface MultiMedia {
  /**
   * Image crop name.
   */
  type?: string;
  /**
   * Image URL.
   */
  src?: string;
  /**
   * Image width.
   */
  width?: number;
  /**
   * Image height.
   */
  height?: number;
}

export interface Review {
  /**
   * Movie title.
   */
  display_title?: string;
  /**
   * Movie MPAA rating (e.g. PG-13).
   */
  mpaa_rating?: string;
  /**
   * Set to 1 if a critics' pick and 0 if not.
   */
  critics_pick?: number;
  /**
   * Author of the review (e.g. Manohla Dargis).
   */
  byline?: string;
  /**
   * Headline of the review.
   */
  headline?: string;
  /**
   * Short summary about the review.
   */
  summary_short?: string;
  /**
   * Review publication date.
   */
  publication_date?: string;
  /**
   * Movie U.S. opening date.
   */
  opening_date?: string | null;
  /**
   * Last modified date of the review.
   */
  date_updated?: string | null;
  link?: Link;
  multimedia?: MultiMedia;
}

export interface GETReviewsFormatResponse {
  status?: string;
  copyright?: string;
  num_results?: number;
  results?: Critic[];
}

export interface GETReviewsFormatPathParams {
  /**
   * Reviewer name or "all" for all reviewers, "full-time" for full-time reviewers, or "part-time" for part-time reviewers.
   */
  reviewer: string
}

export type GETReviewsFormatProps = Omit<GetProps<GETReviewsFormatResponse, void, void, GETReviewsFormatPathParams>, "path"> & GETReviewsFormatPathParams;

/**
 * Get movie critics name, bio and image.
 * 
 * Get movie critics. You can either specify the reviewer name or use "all", "full-time", or "part-time".
 * 
 */
export const GETReviewsFormat = ({reviewer, ...props}: GETReviewsFormatProps) => (
  <Get<GETReviewsFormatResponse, void, void, GETReviewsFormatPathParams>
    path={`/critics/${reviewer}.json`}
    
    {...props}
  />
);

export type UseGETReviewsFormatProps = Omit<UseGetProps<GETReviewsFormatResponse, void, void, GETReviewsFormatPathParams>, "path"> & GETReviewsFormatPathParams;

/**
 * Get movie critics name, bio and image.
 * 
 * Get movie critics. You can either specify the reviewer name or use "all", "full-time", or "part-time".
 * 
 */
export const useGETReviewsFormat = ({reviewer, ...props}: UseGETReviewsFormatProps) => useGet<GETReviewsFormatResponse, void, void, GETReviewsFormatPathParams>((paramsInPath: GETReviewsFormatPathParams) => `/critics/${paramsInPath.reviewer}.json`, {  pathParams: { reviewer }, ...props });


export interface GETReviewsTypeFormatResponse {
  /**
   * Status of call, should be OK.
   */
  status?: string;
  /**
   * Copyright text.
   */
  copyright?: string;
  /**
   * Whether there are more results to paginate thru.
   */
  has_more?: boolean;
  /**
   * Number of movies returned in the API response results array.
   */
  num_results?: number;
  results?: Review[];
}

export interface GETReviewsTypeFormatQueryParams {
  /**
   * Sets the starting point of the result set.  Needs to be multiple of 20.
   */
  offset?: number;
  /**
   * How to order the results.
   */
  order?: "by-opening-date" | "by-publication-date";
}

export interface GETReviewsTypeFormatPathParams {
  /**
   * Filter by critics' pick or not.
   */
  type: "all" | "picks"
}

export type GETReviewsTypeFormatProps = Omit<GetProps<GETReviewsTypeFormatResponse, void, GETReviewsTypeFormatQueryParams, GETReviewsTypeFormatPathParams>, "path"> & GETReviewsTypeFormatPathParams;

/**
 * Get movie reviews.
 * 
 * Get movie reviews.  Can filter to only return Critics' Picks.
 * Supports ordering results by-publication-date or by-opening-date.
 * Use offset to paginate thru results, 20 at a time.
 * 
 */
export const GETReviewsTypeFormat = ({type, ...props}: GETReviewsTypeFormatProps) => (
  <Get<GETReviewsTypeFormatResponse, void, GETReviewsTypeFormatQueryParams, GETReviewsTypeFormatPathParams>
    path={`/reviews/${type}.json`}
    
    {...props}
  />
);

export type UseGETReviewsTypeFormatProps = Omit<UseGetProps<GETReviewsTypeFormatResponse, void, GETReviewsTypeFormatQueryParams, GETReviewsTypeFormatPathParams>, "path"> & GETReviewsTypeFormatPathParams;

/**
 * Get movie reviews.
 * 
 * Get movie reviews.  Can filter to only return Critics' Picks.
 * Supports ordering results by-publication-date or by-opening-date.
 * Use offset to paginate thru results, 20 at a time.
 * 
 */
export const useGETReviewsTypeFormat = ({type, ...props}: UseGETReviewsTypeFormatProps) => useGet<GETReviewsTypeFormatResponse, void, GETReviewsTypeFormatQueryParams, GETReviewsTypeFormatPathParams>((paramsInPath: GETReviewsTypeFormatPathParams) => `/reviews/${paramsInPath.type}.json`, {  pathParams: { type }, ...props });


export interface GETReviewsSearchFormatResponse {
  status?: string;
  copyright?: string;
  has_more?: boolean;
  num_results?: number;
  results?: Review[];
}

export interface GETReviewsSearchFormatQueryParams {
  /**
   * Set to Y to only show critics' picks.  Otherwise shows both.
   */
  "critics-pick"?: "Y";
  /**
   * Sets the starting point of the result set (0, 20, ...).  Used to paginate thru results. Defaults to 0. The has_more field indicates the response has more results.
   */
  offset?: number;
  /**
   * U.S. opening date range. Start and end dates separated by colon (e.g. 1930-01-01:1940-01-01).
   */
  "opening-date"?: string;
  /**
   * Field to order results by (e.g. by-publication-date).
   */
  order?: "by-opening-date" | "by-publication-date";
  /**
   * Review publication date range. Start and end dates separated by colon (e.g. 1930-01-01:1940-01-01).
   */
  "publication-date"?: string;
  /**
   * Filter by reviewer byline (e.g. Stephen Holden).
   */
  reviewer?: string;
  /**
   * Search keyword (e.g. lebowski).
   */
  query?: string;
}

export type GETReviewsSearchFormatProps = Omit<GetProps<GETReviewsSearchFormatResponse, void, GETReviewsSearchFormatQueryParams, void>, "path">;

/**
 * Search for movie reviews.
 * 
 * Search for movie reviews.  Supports filtering by Critics' Pick.
 * 
 */
export const GETReviewsSearchFormat = (props: GETReviewsSearchFormatProps) => (
  <Get<GETReviewsSearchFormatResponse, void, GETReviewsSearchFormatQueryParams, void>
    path={`/reviews/search.json`}
    
    {...props}
  />
);

export type UseGETReviewsSearchFormatProps = Omit<UseGetProps<GETReviewsSearchFormatResponse, void, GETReviewsSearchFormatQueryParams, void>, "path">;

/**
 * Search for movie reviews.
 * 
 * Search for movie reviews.  Supports filtering by Critics' Pick.
 * 
 */
export const useGETReviewsSearchFormat = (props: UseGETReviewsSearchFormatProps) => useGet<GETReviewsSearchFormatResponse, void, GETReviewsSearchFormatQueryParams, void>(`/reviews/search.json`, props);

